import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import toast from 'react-hot-toast';
import { AxiosError } from 'axios';

import * as authService from '~/services/auth.service';
import { TSetState } from '~/common/types';
import { TLoginSchema, loginSchema } from '~/common/schema';
import { Modal } from '~/components/Popup';
import { useAuthModal } from '~/hooks/useModalStore';
import Button from '~/components/Button';

const classInput = 'w-full rounded-lg bg-white p-1.5 text-sm';

export default function LoginForm({ setState }: TSetState) {
  const { closeAuthModal, setIsAuthenticated } = useAuthModal();

  const {
    register,
    handleSubmit,
    watch,
    formState: { errors, isSubmitting },
  } = useForm<TLoginSchema>({
    resolver: zodResolver(loginSchema),
    mode: 'onChange',
  });

  const email = watch('email');
  const password = watch('password');

  const isSignInDisabled =
    email && password && !errors.email && !errors.password;

  const onSubmit = async (data: TLoginSchema) => {
    try {
      const token = await authService.login(data);
      toast.success('ƒêƒÉng nh·∫≠p th√†nh c√¥ng! üéâ');
      localStorage.setItem('accessToken', token);
      closeAuthModal();
      setIsAuthenticated(true);
    } catch (err) {
      const error = err as AxiosError<{ message: string }>;
      toast.error(error.response?.data.message || 'C√≥ l·ªói x·∫£y ra');
    }
  };

  return (
    <Modal className="min-h-[100px] max-w-sm bg-gradient-to-r from-[#f3e9e8] to-[#96b9d9]">
      <div className="px-5 py-2">
        <div className="flex flex-col items-center gap-1">
          <h1 className="text-xl font-bold">ƒêƒÉng nh·∫≠p t√†i kho·∫£n I-Match</h1>
          <p className="text-center text-xs font-light text-red-500">
            M·ªói ng∆∞·ªùi n√™n s·ª≠ d·ª•ng ri√™ng m·ªôt t√†i kho·∫£n, t√†i kho·∫£n nhi·ªÅu ng∆∞·ªùi s·ª≠
            d·ª•ng chung s·∫Ω b·ªã kh√≥a.
          </p>
        </div>
        <form
          onSubmit={handleSubmit(onSubmit)}
          className="mx-auto max-w-md space-y-4 rounded p-4"
        >
          <div className="flex flex-col gap-2">
            <label htmlFor="email" className="font-bold">
              Email c·ªßa b·∫°n
            </label>
            <input
              type="text"
              {...register('email')}
              id="email"
              placeholder="Email"
              className={classInput}
            />
            {errors.email && (
              <p className="text-xs text-red-500">{errors.email.message}</p>
            )}
            <input
              type="password"
              {...register('password')}
              placeholder="M·∫≠t kh·∫©u"
              className={classInput}
            />
            {errors.password && (
              <p className="text-xs text-red-500">{errors.password.message}</p>
            )}
          </div>
          <Button
            type="submit"
            className="mt-3 w-full p-1 font-bold"
            primary
            disable={!isSignInDisabled}
          >
            {isSubmitting ? 'ƒêang x·ª≠ l√Ω...' : 'ƒêƒÉng nh·∫≠p'}
          </Button>
        </form>

        <div className="flex justify-center gap-1 text-sm">
          <p>B·∫°n ch∆∞a c√≥ t√†i kho·∫£n?</p>
          <Button
            className="text-primary font-bold underline"
            onClick={() => setState(false)}
          >
            ƒêƒÉng k√Ω
          </Button>
        </div>

        <p className="p-2 text-center text-xs font-light">
          Vi·ªác b·∫°n ti·∫øp t·ª•c s·ª≠ d·ª•ng trang web n√†y ƒë·ªìng nghƒ©a ƒë·ªìng √Ω v·ªõi
          <span className="underline"> ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng</span> c·ªßa ch√∫ng t√¥i
        </p>
      </div>
    </Modal>
  );
}
